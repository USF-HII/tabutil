#!/usr/bin/env bash
#
# Initialize a python virtual environment and execute the arguments given.
# Defaults to Python 3.x.
#
# Usage: bin/venv [-h|--help]
#                 [-i|--intall-path=<path>]
#                 [-r|--reset]
#                 [-v|--version=<2|3>]
#                 --
#                 <args...>
#
#-----------------------------------------------------------------------------

# The list of paths below will be searced and first one found wins unless you override
# with PYTHON_3_PATH or PYTHON_2_PATH.

PYTHON_3_PATHS="
/shares/hii/sw/python/3.5.3/bin/python3.5
/opt/hii/python/3.5.3/bin/python3.5
/usr/bin/python3.5
/usr/local/bin/python3.5
"

PYTHON_2_PATHS="
/shares/hii/sw/python/2.7.13/bin/python2.7
/opt/hii/python/2.7.13/bin/python2.7
/usr/bin/python2.7
/usr/local/bin/python2.7
"

usage() {
  echo "Usage: $(basename $0) [-h|--help] [-i|--install-path=<venv_path] [-r|--reset] [-v|--version=<2|3>] -- <args...>" 1>&2
  exit 1
}

err() {
  echo "$@" 1>&2
}

cmd() {
  err
  echo "cmd>" "$@" | sed -r 's/.{132}/& \n     /g' 1>&2
  "$@"
}

get_venv() {
  local virtualenv_name="$1"
  local paths="$2"
  local path

  for path in ${paths}; do
    if [[ -x $(dirname ${path})/${virtualenv_name} ]]; then
      echo $(dirname ${path})/${virtualenv_name}
      return
    fi
  done
  echo "Error: Found no virtualenv binary in the following paths: ${paths}" 1>&2
  exit 1
}

run_python() {
  local version="$1"; shift
  local paths="$1"; shift

  case ${version} in
    2) virtualenv_name=virtualenv; python_name=python;;
    3) virtualenv_name=pyvenv; python_name=python3;;
  esac

  if [[ -z ${PYTHON_PATH} ]]; then
    virtualenv=$(get_venv ${virtualenv_name} "${paths}" )
  else
    virtualenv=${PYTHON_PATH}/${virtualenv_name}
  fi

  if [[ -n ${OPT_RESET} ]]; then
    if [[ -d ${VENV_PATH} ]]; then
      cmd /bin/rm -rf ${VENV_PATH}
    fi
  fi

  if ! [[ -d ${VENV_PATH} ]]; then
    cmd ${virtualenv} ${VENV_PATH}
    cmd ${VENV_PATH}/bin/${python_name} --version
    cmd ${VENV_PATH}/bin/pip install --upgrade pip

    if [[ -f requirements.txt ]]; then
      cmd ${VENV_PATH}/bin/pip install -r requirements.txt
    fi
  fi

  source ${VENV_PATH}/bin/activate && "$@"
}

export BASE=$(readlink -f $(dirname $0)/..)

set -eo pipefail

myopts=$(getopt --options i:rv:h --longoptions install-path:,reset,version:,help -- "$@" ) || usage

eval set -- "${myopts}"

while true; do
  case $1 in
    -h|--help) usage ;;
    -i|--install-path) OPT_VENV_PATH=$2; shift 2 ;;
    -r|--reset) OPT_RESET="true"; shift ;;
    -v|--version) OPT_PYTHON_VERSION=$2; shift 2 ;;
    --) shift; break ;;
    *) break ;;
  esac
  shift
done

if [[ $# -lt 1 ]]; then
  usage
fi

PYTHON_VERSION=${OPT_PYTHON_VERSION:-3}

case ${PYTHON_VERSION} in
  2) VENV_PATH=${OPT_VENV_PATH:-.venv2} ;;
  3) VENV_PATH=${OPT_VENV_PATH:-.venv3} ;;
esac

case ${PYTHON_VERSION} in
  2) run_python 2 "${PYTHON_2_PATHS}" "$@" ;;
  3) run_python 3 "${PYTHON_3_PATHS}" "$@" ;;
  *) echo "$(basename $0): Unsupported Python Version: '${PYTHON_VERSION}'" 1>&2; exit 1;;
esac
